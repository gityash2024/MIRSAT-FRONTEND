import React, { useState, useEffect, useRef } from 'react';
import styled from 'styled-components';
import { useDispatch } from 'react-redux';
import { 
  ChevronDown, ChevronUp, ChevronRight, CheckCircle, XCircle, 
  AlertTriangle, Clock, Loader, FileText,
  PaperclipIcon, MessageSquare, Timer, Image,
  Trash2, Award, BarChart2, HelpCircle, Activity,
  Clipboard, AlertCircle, Info, Search,
  PauseCircle, PlayCircle, Download, Edit
} from 'lucide-react';
import { toast } from 'react-hot-toast';
import { updateUserTaskProgress, uploadTaskAttachment } from '../../../store/slices/userTasksSlice';

const Container = styled.div`
  padding: 16px;
`;

const Title = styled.h2`
  font-size: 18px;
  font-weight: 600;
  color: var(--color-navy);
  margin-bottom: 24px;
  display: flex;
  align-items: center;
  gap: 10px;
`;

const NoSubLevelsMessage = styled.div`
  text-align: center;
  padding: 40px 20px;
  background: rgba(255, 255, 255, 0.7);
  border-radius: 12px;
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.05);
  
  h3 {
    font-size: 18px;
    font-weight: 600;
    color: var(--color-navy);
    margin-bottom: 8px;
  }
  
  p {
    font-size: 14px;
    color: #64748b;
  }
  
  svg {
    margin-bottom: 16px;
    color: #3f51b5;
  }
`;

const InspectionLayout = styled.div`
  display: flex;
  background: white;
  border-radius: 12px;
  overflow: hidden;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
  min-height: 600px;
  margin-bottom: 24px;
`;

const Sidebar = styled.div`
  width: 300px;
  background: #f8fafc;
  border-right: 1px solid #e2e8f0;
  overflow-y: auto;
  max-height: 80vh;
`;

const SidebarHeader = styled.div`
  padding: 16px;
  border-bottom: 1px solid #e2e8f0;
  position: sticky;
  top: 0;
  background: #f8fafc;
  z-index: 10;
`;

const SearchBox = styled.div`
  position: relative;
  margin-top: 10px;
  
  input {
    width: 100%;
    padding: 8px 12px 8px 34px;
    border-radius: 6px;
    border: 1px solid #e2e8f0;
    font-size: 14px;
    
    &:focus {
      outline: none;
      border-color: #3f51b5;
      box-shadow: 0 0 0 2px rgba(63, 81, 181, 0.1);
    }
  }
  
  svg {
    position: absolute;
    left: 10px;
    top: 50%;
    transform: translateY(-50%);
    color: #94a3b8;
  }
`;

const SidebarContent = styled.div`
  padding: 8px;
`;

const TreeNode = styled.div`
  margin-bottom: 2px;
`;

const NodeHeader = styled.div`
  display: flex;
  align-items: center;
  padding: 8px 10px;
  border-radius: 6px;
  cursor: pointer;
  transition: background-color 0.2s;
  background-color: ${props => props.isSelected ? 'rgba(26, 35, 126, 0.08)' : 'transparent'};
  
  &:hover {
    background-color: ${props => props.isSelected ? 'rgba(26, 35, 126, 0.12)' : 'rgba(226, 232, 240, 0.5)'};
  }
`;

const NodeIcon = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  width: 20px;
  margin-right: 8px;
  color: ${props => props.isSelected ? 'var(--color-navy)' : '#64748b'};
`;

const StatusIcon = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  width: 18px;
  height: 18px;
  margin-right: 8px;
  
  svg {
    color: ${props => {
      switch(props.status) {
        case 'completed':
        case 'full_compliance':
          return '#388e3c';
        case 'failed':
        case 'incomplete':
        case 'non_compliance':
          return '#d32f2f';
        case 'in_progress':
        case 'partial_compliance':
          return '#f57c00';
        case 'not_applicable':
          return '#9e9e9e';
        default:
          return '#64748b';
      }
    }};
  }
`;

const NodeLabel = styled.div`
  font-size: 14px;
  color: ${props => props.isSelected ? 'var(--color-navy)' : '#334155'};
  font-weight: ${props => props.isSelected ? '600' : '400'};
  flex-grow: 1;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
`;

const ChildNodes = styled.div`
  padding-left: ${props => props.level * 16}px;
`;

const ContentPane = styled.div`
  flex: 1;
  padding: 24px;
  overflow-y: auto;
  max-height: 80vh;
`;

const StatusBadge = styled.span`
  display: inline-flex;
  align-items: center;
  gap: 6px;
  padding: 4px 12px;
  border-radius: 20px;
  font-size: 13px;
  font-weight: 500;
  white-space: nowrap;
  margin-left: 8px;
  
  ${props => {
    switch(props.status) {
      case 'pending':
        return 'background-color: rgba(255, 248, 225, 0.8); color: #f57c00; border: 1px solid rgba(245, 124, 0, 0.2);';
      case 'completed':
      case 'full_compliance':
        return 'background-color: rgba(232, 245, 233, 0.8); color: #2e7d32; border: 1px solid rgba(46, 125, 50, 0.2);';
      case 'failed':
      case 'incomplete':
      case 'non_compliance':
        return 'background-color: rgba(255, 235, 238, 0.8); color: #d32f2f; border: 1px solid rgba(211, 47, 47, 0.2);';
      case 'in_progress':
      case 'partial_compliance':
        return 'background-color: rgba(227, 242, 253, 0.8); color: #0277bd; border: 1px solid rgba(2, 119, 189, 0.2);';
      case 'not_applicable':
        return 'background-color: rgba(245, 245, 245, 0.8); color: #616161; border: 1px solid rgba(97, 97, 97, 0.2);';
      default:
        return 'background-color: rgba(245, 245, 245, 0.8); color: #616161; border: 1px solid rgba(97, 97, 97, 0.2);';
    }
  }}
`;

const MandatoryBadge = styled.span`
  display: inline-flex;
  align-items: center;
  gap: 4px;
  padding: 2px 8px;
  border-radius: 4px;
  font-size: 12px;
  font-weight: 500;
  background-color: ${props => props.mandatory ? 'rgba(227, 242, 253, 0.8)' : 'rgba(245, 245, 245, 0.8)'};
  color: ${props => props.mandatory ? '#0277bd' : '#616161'};
  border: 1px solid ${props => props.mandatory ? 'rgba(2, 119, 189, 0.2)' : 'rgba(97, 97, 97, 0.2)'};
  margin-left: 8px;
`;

const ContentHeader = styled.div`
  margin-bottom: 16px;
  padding-bottom: 16px;
  border-bottom: 1px solid #e2e8f0;
`;

const ContentTitle = styled.h3`
  font-size: 18px;
  font-weight: 600;
  color: var(--color-navy);
  margin-bottom: 8px;
  display: flex;
  align-items: center;
  flex-wrap: wrap;
  gap: 8px;
`;

const ContentDescription = styled.p`
  color: #64748b;
  font-size: 14px;
  line-height: 1.6;
  margin: 12px 0;
`;

const ButtonGroup = styled.div`
  display: flex;
  gap: 10px;
  margin-top: 16px;
  flex-wrap: wrap;
`;

const ActionButton = styled.button`
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 8px 16px;
  border-radius: 8px;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  border: 1px solid rgba(0, 0, 0, 0.1);
  
  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
  }
  
  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
  }
`;

const CompleteButton = styled(ActionButton)`
  background: linear-gradient(135deg, #e8f5e9 0%, #c8e6c9 100%);
  color: #2e7d32;
  box-shadow: 0 2px 8px rgba(76, 175, 80, 0.15);
`;

const PartialButton = styled(ActionButton)`
  background: linear-gradient(135deg, #fff8e1 0%, #ffecb3 100%);
  color: #f57c00;
  box-shadow: 0 2px 8px rgba(255, 152, 0, 0.15);
`;

const FailButton = styled(ActionButton)`
  background: linear-gradient(135deg, #ffebee 0%, #ffcdd2 100%);
  color: #c62828;
  box-shadow: 0 2px 8px rgba(229, 57, 53, 0.15);
`;

const NAButton = styled(ActionButton)`
  background: linear-gradient(135deg, #f5f5f5 0%, #e0e0e0 100%);
  color: #616161;
  box-shadow: 0 2px 8px rgba(97, 97, 97, 0.15);
`;

const ScoringSummary = styled.div`
  background: rgba(237, 246, 255, 0.8);
  border-radius: 12px;
  padding: 16px;
  margin-bottom: 24px;
  border: 1px solid rgba(191, 220, 255, 0.5);
`;

const SectionTitle = styled.h3`
  font-size: 16px;
  font-weight: 600;
  color: var(--color-navy);
  margin-bottom: 16px;
  display: flex;
  align-items: center;
  gap: 10px;
`;

const ScoreGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  gap: 16px;
  margin-top: 12px;
`;

const ScoreItem = styled.div`
  background: white;
  border-radius: 8px;
  padding: 12px;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
  
  .score-label {
    font-size: 12px;
    color: #64748b;
    margin-bottom: 6px;
  }
  
  .score-value {
    font-size: 16px;
    font-weight: 600;
    color: var(--color-navy);
  }
  
  .score-percent {
    font-size: 13px;
    color: ${props => props.percent >= 80 ? '#4caf50' : props.percent >= 50 ? '#ff9800' : '#f44336'};
    margin-left: 4px;
  }
`;

const ScoringCriteria = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 12px;
  margin-top: 12px;
  
  .criteria-item {
    background: white;
    padding: 8px 12px;
    border-radius: 6px;
    font-size: 13px;
    display: flex;
    align-items: center;
    gap: 6px;
    
    &.full {
      color: #2e7d32;
      border: 1px solid rgba(76, 175, 80, 0.2);
    }
    
    &.partial {
      color: #e65100;
      border: 1px solid rgba(255, 152, 0, 0.2);
    }
    
    &.non {
      color: #c62828;
      border: 1px solid rgba(244, 67, 54, 0.2);
    }
    
    &.na {
      color: #616161;
      border: 1px solid rgba(97, 97, 97, 0.2);
    }
  }
`;

const ActionInput = styled.div`
  display: flex;
  flex-direction: column;
  gap: 12px;
  margin-top: 16px;
  padding-top: 16px;
  border-top: 1px solid rgba(0, 0, 0, 0.05);
`;

const CommentInput = styled.textarea`
  width: 100%;
  padding: 12px;
  border-radius: 8px;
  border: 1px solid rgba(0, 0, 0, 0.1);
  background: rgba(248, 250, 252, 0.7);
  font-size: 14px;
  resize: vertical;
  min-height: 80px;
  
  &:focus {
    outline: none;
    border-color: #3f51b5;
    box-shadow: 0 0 0 2px rgba(63, 81, 181, 0.1);
  }
`;

const FileInput = styled.input`
  display: none;
`;

const FileInputLabel = styled.label`
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 8px 16px;
  background: rgba(255, 255, 255, 0.8);
  border: 1px solid rgba(0, 0, 0, 0.1);
  border-radius: 8px;
  font-size: 14px;
  cursor: pointer;
  transition: all 0.2s ease;
  width: fit-content;
  
  &:hover {
    background: rgba(255, 255, 255, 0.9);
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
  }
`;

const TimeInputContainer = styled.div`
  display: flex;
  align-items: center;
  gap: 8px;
`;

const TimeLabel = styled.span`
  font-size: 14px;
  color: #64748b;
`;

const StartTimerButton = styled.button`
  display: flex;
  align-items: center;
  gap: 6px;
  background: #e8f5e9;
  color: #2e7d32;
  border: 1px solid rgba(46, 125, 50, 0.2);
  padding: 6px 12px;
  border-radius: 6px;
  font-size: 13px;
  cursor: pointer;
  
  &:hover {
    background: #c8e6c9;
  }
`;

const StopTimerButton = styled.button`
  display: flex;
  align-items: center;
  gap: 6px;
  background: #ffebee;
  color: #c62828;
  border: 1px solid rgba(198, 40, 40, 0.2);
  padding: 6px 12px;
  border-radius: 6px;
  font-size: 13px;
  cursor: pointer;
  
  &:hover {
    background: #ffcdd2;
  }
`;

const ComplianceButtons = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  margin-top: 24px;
  justify-content: center;
`;

const PhotoPreviewContainer = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  margin-top: 12px;
  position: relative;
`;

const PhotoPreview = styled.div`
  position: relative;
  width: 100px;
  height: 100px;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  cursor: pointer;
  
  &:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    transform: scale(1.05);
  }
  
  img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .remove-button {
    position: absolute;
    top: 4px;
    right: 4px;
    background: rgba(255, 255, 255, 0.8);
    border: none;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    color: #d32f2f;
    
    &:hover {
      background: white;
    }
  }
`;

const PhotoLightbox = styled.div`
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.8);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  
  img {
    max-width: 90%;
    max-height: 90%;
    object-fit: contain;
    border-radius: 8px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
  }
  
  .close-button {
    position: absolute;
    top: 20px;
    right: 20px;
    background: rgba(255, 255, 255, 0.2);
    border: none;
    color: white;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-size: 20px;
    
    &:hover {
      background: rgba(255, 255, 255, 0.4);
    }
  }
`;

const ImageUploadWrapper = styled.div`
  position: relative;
  min-height: 120px;
  margin-bottom: 12px;
`;

const ProgressBar = styled.div`
  height: 8px;
  background-color: rgba(224, 224, 224, 0.6);
  border-radius: 4px;
  overflow: hidden;
  margin-top: 24px;
  
  .fill {
    height: 100%;
    background: linear-gradient(90deg, rgba(26, 35, 126, 0.8), rgba(63, 81, 181, 0.9));
    border-radius: 4px;
    width: ${props => props.progress || 0}%;
  }
`;

const ProgressInfo = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-top: 8px;
  
  .label {
    font-size: 14px;
    font-weight: 500;
    color: #334155;
  }
  
  .percentage {
    font-size: 14px;
    font-weight: 600;
    color: var(--color-navy);
  }
`;

const ExportButton = styled(ActionButton)`
  background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
  color: #0d47a1;
  box-shadow: 0 2px 8px rgba(33, 150, 243, 0.15);
  margin-top: 24px;
`;

const Breadcrumbs = styled.div`
  display: flex;
  align-items: center;
  flex-wrap: wrap;
  gap: 8px;
  margin-bottom: 12px;
  font-size: 14px;
  color: #64748b;
`;

const Breadcrumb = styled.span`
  cursor: pointer;
  &:hover {
    color: var(--color-navy);
    text-decoration: underline;
  }
`;

const BreadcrumbSeparator = styled.span`
  color: #94a3b8;
`;

const LevelNumber = styled.span`
  font-weight: 600;
  color: var(--color-navy);
  margin-right: 6px;
`;

const StatusIcon2 = ({ status, size = 18 }) => {
  switch (status) {
    case 'completed':
    case 'full_compliance':
      return <CheckCircle size={size} color="#388e3c" />;
    case 'failed':
    case 'incomplete':
    case 'non_compliance':
      return <XCircle size={size} color="#d32f2f" />;
    case 'in_progress':
    case 'partial_compliance':
      return <AlertCircle size={size} color="#f57c00" />;
    case 'not_applicable':
      return <HelpCircle size={size} color="#9e9e9e" />;
    case 'pending':
    default:
      return <Clock size={size} color="#64748b" />;
  }
};

// Add styled components for the new design
const InspectionContainer = styled.div`
  background: white;
  border-radius: 12px;
  overflow: hidden;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
  margin-bottom: 24px;
`;

const SearchContainer = styled.div`
  padding: 16px;
  background: #f8fafc;
  border-bottom: 1px solid #e2e8f0;
  display: flex;
  position: relative;
`;

const SearchInput = styled.input`
  width: 100%;
  padding: 10px 16px 10px 40px;
  font-size: 14px;
  border: 1px solid #e2e8f0;
  border-radius: 8px;
  
  &:focus {
    outline: none;
    border-color: var(--color-navy);
    box-shadow: 0 0 0 2px rgba(26, 35, 126, 0.1);
  }
`;

const SearchButton = styled.button`
  position: absolute;
  left: 24px;
  top: 50%;
  transform: translateY(-50%);
  background: none;
  border: none;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #94a3b8;
`;

const ResultsTitle = styled.h3`
  padding: 16px;
  font-size: 16px;
  font-weight: 600;
  color: var(--color-navy);
  background: #f8fafc;
  border-bottom: 1px solid #e2e8f0;
`;

const InspectionBodyContainer = styled.div`
  display: flex;
  min-height: 500px;
  
  @media (max-width: 768px) {
    flex-direction: column;
  }
`;

const TreeView = styled.div`
  width: 300px;
  background: #f8fafc;
  border-right: 1px solid #e2e8f0;
  overflow-y: auto;
  max-height: 80vh;
  
  @media (max-width: 768px) {
    width: 100%;
    max-height: 400px;
  }
`;

const TreeHeader = styled.div`
  padding: 16px;
  border-bottom: 1px solid #e2e8f0;
  display: flex;
  justify-content: space-between;
  align-items: center;
  
  h3 {
    font-size: 16px;
    font-weight: 600;
    color: var(--color-navy);
    margin: 0;
  }
`;

const ProgressIndicator = styled.div`
  background: #e3f2fd;
  color: #0d47a1;
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 12px;
  font-weight: 500;
`;

const ExportButtonContainer = styled.div`
  padding: 16px;
  border-top: 1px solid #e2e8f0;
  margin-top: 16px;
`;

const NoSelectionMessage = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 64px 24px;
  text-align: center;
  color: #64748b;
  
  svg {
    color: #e2e8f0;
    margin-bottom: 16px;
  }
  
  h3 {
    color: var(--color-navy);
    margin-bottom: 8px;
  }
  
  p {
    max-width: 300px;
    margin: 0 auto;
  }
`;

const InspectionStepForm = ({ 
  task, 
  onUpdateProgress, 
  onExportReport,
  activePage,
  pageData
}) => {
  const dispatch = useDispatch();
  const [selectedSubLevel, setSelectedSubLevel] = useState(null);
  const [expandedNodes, setExpandedNodes] = useState({});
  const [loading, setLoading] = useState({});
  const [notes, setNotes] = useState({});
  const [timeSpent, setTimeSpent] = useState({});
  const [photos, setPhotos] = useState({});
  const [activeTimers, setActiveTimers] = useState({});
  const [photoPreview, setPhotoPreview] = useState(null);
  const [complianceStatus, setComplianceStatus] = useState({});
  const [uploadingPhotos, setUploadingPhotos] = useState({});
  const [searchTerm, setSearchTerm] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const [scores, setScores] = useState({
    total: 0,
    achieved: 0,
    percentage: 0,
    areas: []
  });
  
  const fileInputRefs = useRef({});
  const timerRefs = useRef({});
  
  // Initialize from existing task data
  useEffect(() => {
    if (task && task.progress && task.progress.length > 0) {
      const notesObj = {};
      const timeObj = {};
      const photosObj = {};
      const complianceObj = {};
      
      task.progress.forEach(p => {
        if (p && p.subLevelId) {
          const id = typeof p.subLevelId === 'string' 
            ? p.subLevelId 
            : (p.subLevelId._id || p.subLevelId.id || p.subLevelId);
          
          notesObj[id] = p.notes || '';
          timeObj[id] = p.timeSpent || 0;
          photosObj[id] = p.photos || [];
          complianceObj[id] = p.status || 'pending';
        }
      });
      
      setNotes(notesObj);
      setTimeSpent(timeObj);
      setPhotos(photosObj);
      setComplianceStatus(complianceObj);
      
      // Calculate scores
      calculateScores();
    }
  }, [task, pageData, activePage]);
  
  // Clean up timers on unmount
  useEffect(() => {
    return () => {
      Object.values(timerRefs.current).forEach(timer => {
        if (timer) clearInterval(timer);
      });
    };
  }, []);
  
  // Search functionality
  useEffect(() => {
    if (!searchTerm.trim()) {
      setSearchResults([]);
      return;
    }
    
    const { subLevels } = getInspectionData();
    const results = searchSubLevels(subLevels, searchTerm.toLowerCase());
    setSearchResults(results);
  }, [searchTerm, task]);
  
  const searchSubLevels = (subLevels, term, path = '') => {
    if (!subLevels || !Array.isArray(subLevels)) return [];
    
    let results = [];
    
    for (const subLevel of subLevels) {
      if (!subLevel) continue;
      
      const currentPath = path ? `${path} > ${subLevel.name}` : subLevel.name;
      
      if (subLevel.name?.toLowerCase().includes(term) || 
          subLevel.description?.toLowerCase().includes(term)) {
        results.push({
          ...subLevel,
          path: currentPath
        });
      }
      
      if (subLevel.subLevels && subLevel.subLevels.length > 0) {
        const childResults = searchSubLevels(subLevel.subLevels, term, currentPath);
        results = [...results, ...childResults];
      }
    }
    
    return results;
  };
  
  const calculateScores = () => {
    if (!task || !task.progress) return;
    
    let totalPoints = 0;
    let achievedPoints = 0;
    const assessmentAreas = {};
    
    // First, organize into assessment areas
    if (task.inspectionLevel && task.inspectionLevel.subLevels) {
      const processSubLevels = (subLevels, areaName = 'General') => {
        subLevels.forEach(subLevel => {
          if (!subLevel) return;
          
          // Use category/area name if available
          const currentArea = subLevel.category || areaName;
          
          if (!assessmentAreas[currentArea]) {
            assessmentAreas[currentArea] = {
              name: currentArea,
              totalPoints: 0,
              achievedPoints: 0,
              items: []
            };
          }
          
          // Find matching progress item
          const progressItem = task.progress.find(p => 
            p.subLevelId && p.subLevelId.toString() === subLevel._id.toString()
          );
          
          if (progressItem) {
            const isMandatory = subLevel.mandatory !== false;
            
            if (isMandatory) {
              // Each mandatory item is worth 2 points
              assessmentAreas[currentArea].totalPoints += 2;
              
              // Scoring based on status
              if (progressItem.status === 'completed' || progressItem.status === 'full_compliance') {
                assessmentAreas[currentArea].achievedPoints += 2;
              } else if (progressItem.status === 'in_progress' || progressItem.status === 'partial_compliance') {
                assessmentAreas[currentArea].achievedPoints += 1;
              }
              
              // Add to total score counts
              totalPoints += 2;
              if (progressItem.status === 'completed' || progressItem.status === 'full_compliance') {
                achievedPoints += 2;
              } else if (progressItem.status === 'in_progress' || progressItem.status === 'partial_compliance') {
                achievedPoints += 1;
              }
              
              // Add to items list
              assessmentAreas[currentArea].items.push({
                id: subLevel._id,
                name: subLevel.name,
                status: progressItem.status,
                points: progressItem.status === 'completed' || progressItem.status === 'full_compliance' ? 2 : 
                        progressItem.status === 'in_progress' || progressItem.status === 'partial_compliance' ? 1 : 0,
                maxPoints: 2
              });
            }
          }
          
          // Process nested sub-levels
          if (subLevel.subLevels && subLevel.subLevels.length > 0) {
            processSubLevels(subLevel.subLevels, currentArea);
          }
        });
      };
      
      processSubLevels(task.inspectionLevel.subLevels);
    }
    
    // Convert assessment areas to array format
    const areasList = Object.values(assessmentAreas).map(area => ({
      name: area.name,
      score: area.achievedPoints,
      maxScore: area.totalPoints,
      percentage: area.totalPoints > 0 ? (area.achievedPoints / area.totalPoints) * 100 : 0,
      items: area.items
    }));
    
    const percentage = totalPoints > 0 ? Math.round((achievedPoints / totalPoints) * 100) : 0;
    
    setScores({
      total: totalPoints,
      achieved: achievedPoints,
      percentage,
      areas: areasList
    });
  };
  
  const startTimer = (subLevelId) => {
    // Clear any existing timer for this sublevel
    if (timerRefs.current[subLevelId]) {
      clearInterval(timerRefs.current[subLevelId]);
    }
    
    // Start new timer
    setActiveTimers(prev => ({ ...prev, [subLevelId]: true }));
    
    // Get starting value
    const startingValue = timeSpent[subLevelId] || 0;
    const startTime = Date.now();
    
    // Update time every second
    timerRefs.current[subLevelId] = setInterval(() => {
      const elapsedHours = (Date.now() - startTime) / (1000 * 60 * 60);
      const newValue = startingValue + elapsedHours;
      
      setTimeSpent(prev => ({
        ...prev,
        [subLevelId]: newValue
      }));
    }, 1000);
    
    toast.success('Timer started');
  };
  
  const stopTimer = (subLevelId) => {
    if (timerRefs.current[subLevelId]) {
      clearInterval(timerRefs.current[subLevelId]);
      delete timerRefs.current[subLevelId];
    }
    
    setActiveTimers(prev => ({ ...prev, [subLevelId]: false }));
    toast.success('Timer stopped');
  };
  
  // Ensure we have the proper data structure for rendering
  const getInspectionData = () => {
    // If we're in page-wise view, use the pageData
    if (pageData) {
      return {
        name: pageData.name || 'Unnamed Page',
        description: pageData.description || '',
        subLevels: pageData.sections || []
      };
    }
    
    // Otherwise, use the full inspection level data
    return {
      name: task.inspectionLevel?.name || 'Inspection',
      description: task.inspectionLevel?.description || '',
      subLevels: task.inspectionLevel?.subLevels || []
    };
  };
  
  const toggleNode = (nodeId) => {
    setExpandedNodes(prev => ({
      ...prev,
      [nodeId]: !prev[nodeId]
    }));
  };
  
  const handleFileChange = async (subLevelId, e) => {
    if (!e.target.files || e.target.files.length === 0) return;
    
    const file = e.target.files[0];
    
    // Basic validation
    if (file.size > 5 * 1024 * 1024) { // 5MB
      toast.error('File size should be less than 5MB');
      return;
    }
    
    const validTypes = ['image/jpeg', 'image/png', 'image/gif'];
    if (!validTypes.includes(file.type)) {
      toast.error('Only JPG, PNG and GIF images are allowed');
      return;
    }
    
    // Set uploading state
    setUploadingPhotos(prev => ({ ...prev, [subLevelId]: true }));
    
    toast.loading('Uploading file...');
    
    try {
      // Use the Redux action to upload the file
      const result = await dispatch(uploadTaskAttachment({
        taskId: task._id,
        file
      })).unwrap();
      
      toast.dismiss();
      toast.success('File uploaded successfully');
      
      // Add to photos state for this sublevel
      const fileUrl = result.attachments?.[result.attachments.length - 1]?.url || '';
      
      setPhotos(prev => {
        const currentPhotos = prev[subLevelId] || [];
        return {
          ...prev,
          [subLevelId]: [...currentPhotos, fileUrl]
        };
      });
      
      // Reset the file input
      if (fileInputRefs.current[subLevelId]) {
        fileInputRefs.current[subLevelId].value = '';
      }
    } catch (error) {
      toast.dismiss();
      console.error('File upload error:', error);
      toast.error('Failed to upload file: ' + (error.message || 'Unknown error'));
    } finally {
      // Remove uploading state
      setUploadingPhotos(prev => ({ ...prev, [subLevelId]: false }));
    }
  };
  
  const removePhoto = (subLevelId, photoUrl) => {
    setPhotos(prev => {
      const currentPhotos = prev[subLevelId] || [];
      return {
        ...prev,
        [subLevelId]: currentPhotos.filter(url => url !== photoUrl)
      };
    });
  };
  
  const handleNoteChange = (subLevelId, value) => {
    setNotes(prev => ({
      ...prev,
      [subLevelId]: value
    }));
  };
  
  const handleTimeChange = (subLevelId, value) => {
    const time = parseFloat(value) || 0;
    setTimeSpent(prev => ({
      ...prev,
      [subLevelId]: time
    }));
  };
  
  const handleComplianceChange = (subLevelId, status) => {
    setComplianceStatus(prev => ({
      ...prev,
      [subLevelId]: status
    }));
    
    // Update the status in the backend
    handleUpdateSubLevel(subLevelId, status);
  };
  
  const handleUpdateSubLevel = async (subLevelId, status) => {
    // Validate inputs if completing
    if (status === 'completed' || status === 'full_compliance') {
      const subLevelNotes = notes[subLevelId] || '';
      const subLevelPhotos = photos[subLevelId] || [];
      
      // Check if template requires photos
      if (task.inspectionLevel?.completionCriteria?.requiredPhotos && 
         (!subLevelPhotos || subLevelPhotos.length === 0)) {
        toast.error('Please add at least one photo before completing this item');
        return;
      }
      
      // Check if template requires notes
      if (task.inspectionLevel?.completionCriteria?.requiredNotes && 
         (!subLevelNotes || subLevelNotes.trim() === '')) {
        toast.error('Please add notes before completing this item');
        return;
      }
    }
    
    setLoading(prev => ({ ...prev, [subLevelId]: true }));
    
    try {
      const updatedTask = await dispatch(updateUserTaskProgress({
        taskId: task._id,
        subLevelId,
        status,
        notes: notes[subLevelId] || '',
        photos: photos[subLevelId] || [],
        timeSpent: timeSpent[subLevelId] || 0
      })).unwrap();
      
      toast.success(`Checkpoint status updated`);
      if (onUpdateProgress) onUpdateProgress(updatedTask);
      
      // Update local compliance status
      setComplianceStatus(prev => ({
        ...prev,
        [subLevelId]: status
      }));
      
      // Recalculate scores
      calculateScores();
      
      // Stop timer if running
      if (activeTimers[subLevelId]) {
        stopTimer(subLevelId);
      }
    } catch (error) {
      toast.error(error.message || 'Failed to update checkpoint status');
    } finally {
      setLoading(prev => ({ ...prev, [subLevelId]: false }));
    }
  };
  
  // Get progress status for a specific sublevel
  const getSubLevelStatus = (subLevelId) => {
    // First check local state
    if (complianceStatus[subLevelId]) {
      return complianceStatus[subLevelId];
    }
    
    // Then check task progress
    const { progress } = getInspectionData();
    if (!progress || !progress.length) return 'pending';
    
    const progressItem = progress.find(p => {
      if (!p || !p.subLevelId) return false;
      
      const progressSubLevelId = typeof p.subLevelId === 'string' 
        ? p.subLevelId 
        : (p.subLevelId._id || p.subLevelId.id || p.subLevelId);
        
      return progressSubLevelId === subLevelId.toString();
    });
    
    return progressItem ? progressItem.status : 'pending';
  };
  
  const calculateProgress = () => {
    return task?.overallProgress || 0;
  };
  
  // Add this helper function to calculate node numbering
  const getLevelNumber = (node, index, parentNumber = '') => {
    if (!node) return '';
    
    // If the node already has a levelNumber property, use it
    if (node.levelNumber) return node.levelNumber;
    
    // Calculate based on hierarchy
    if (parentNumber) {
      // Sub-level under a parent - use numeric (e.g., A.1, A.2, etc.)
      return `${parentNumber}.${index + 1}`;
    } else {
      // Top-level - use letters (A, B, C, etc.)
      return String.fromCharCode(65 + index);
    }
  };
  
  // Update the flattenSubLevels function to include level numbers and status
  const flattenSubLevels = (subLevels, parentName = '', level = 0, parentNumber = '') => {
    let result = [];
    
    if (!subLevels || !Array.isArray(subLevels)) return result;
    
    subLevels.forEach((subLevel, index) => {
      // Calculate the level number for this node
      const levelNumber = getLevelNumber(subLevel, index, parentNumber);
      
      // Create the path name
      const fullName = parentName ? `${parentName} > ${subLevel.name || 'Unnamed'}` : (subLevel.name || 'Unnamed');
      
      // Add this node to the result
      result.push({
        ...subLevel,
        path: fullName,
        level,
        levelNumber, // Add level number to the node
        status: getSubLevelStatus(subLevel._id) // Keep the status property for search functionality
      });
      
      // Recursively add child nodes
      if (subLevel.subLevels && subLevel.subLevels.length > 0) {
        result = [
          ...result,
          ...flattenSubLevels(subLevel.subLevels, fullName, level + 1, levelNumber)
        ];
      }
    });
    
    return result;
  };
  
  // Update the renderTreeNode function to display level numbers
  const renderTreeNode = (node, level = 0, index = 0, parentNumber = '') => {
    if (!node) return null;
    
    const hasChildren = node.subLevels && node.subLevels.length > 0;
    const isExpanded = expandedNodes[node._id];
    const isSelected = selectedSubLevel && selectedSubLevel._id === node._id;
    const status = getSubLevelStatus(node._id);
    
    // Calculate the level number for this node
    const levelNumber = node.levelNumber || getLevelNumber(node, index, parentNumber);
    
    return (
      <TreeNode key={node._id}>
        <NodeHeader 
          isSelected={isSelected}
          onClick={() => {
            setSelectedSubLevel(node);
            if (hasChildren) {
              toggleNode(node._id);
            }
          }}
        >
          <NodeIcon isSelected={isSelected}>
            {hasChildren ? (
              isExpanded ? <ChevronDown size={16} /> : <ChevronRight size={16} />
            ) : (
              <span style={{ width: 16 }}></span>
            )}
          </NodeIcon>
          <StatusIcon status={status}>
            <StatusIcon2 status={status} size={16} />
          </StatusIcon>
          <NodeLabel isSelected={isSelected}>
            <LevelNumber>{levelNumber}</LevelNumber> {node.name || 'Unnamed'}
          </NodeLabel>
        </NodeHeader>
        
        {hasChildren && isExpanded && (
          <ChildNodes level={level + 1}>
            {node.subLevels.map((child, idx) => 
              renderTreeNode(child, level + 1, idx, levelNumber)
            )}
          </ChildNodes>
        )}
      </TreeNode>
    );
  };
  
  const renderSearchResults = () => {
    if (!searchResults || searchResults.length === 0) {
      return (
        <div style={{ padding: '16px', color: '#64748b', fontSize: '14px', textAlign: 'center' }}>
          No results found
        </div>
      );
    }
    
    return (
      <div style={{ padding: '8px' }}>
        {searchResults.map(result => (
          <NodeHeader 
            key={result._id}
            isSelected={selectedSubLevel && selectedSubLevel._id === result._id}
            onClick={() => setSelectedSubLevel(result)}
            style={{ marginBottom: '2px' }}
          >
            <StatusIcon status={result.status || getSubLevelStatus(result._id)}>
              <StatusIcon2 status={result.status || getSubLevelStatus(result._id)} size={16} />
            </StatusIcon>
            <div style={{ flexGrow: 1 }}>
              <NodeLabel isSelected={selectedSubLevel && selectedSubLevel._id === result._id}>
                <LevelNumber>{result.levelNumber || ''}</LevelNumber>
                {result.name || 'Unnamed'}
              </NodeLabel>
              <div style={{ fontSize: '12px', color: '#94a3b8', marginTop: '2px' }}>
                {result.path}
              </div>
            </div>
          </NodeHeader>
        ))}
      </div>
    );
  };
  
  const renderContentForm = () => {
    if (!selectedSubLevel) {
      return (
        <NoSelectionMessage>
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            width="32" 
            height="32" 
            viewBox="0 0 24 24" 
            fill="none" 
            stroke="currentColor" 
            strokeWidth="2" 
            strokeLinecap="round" 
            strokeLinejoin="round"
          >
            <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2" />
          </svg>
          <h3>No Section Selected</h3>
          <p>Select a section from the list to view its details and questions.</p>
        </NoSelectionMessage>
      );
    }

    const subLevelId = selectedSubLevel._id;
    const status = getSubLevelStatus(subLevelId);
    const isCompleted = status === 'completed' || status === 'full_compliance';
    const isFailed = status === 'failed' || status === 'incomplete' || status === 'non_compliance';
    const isPartial = status === 'in_progress' || status === 'partial_compliance';
    const isNotApplicable = status === 'not_applicable';
    const isTaskCompleted = task && task.status === 'completed';
    const isMandatory = selectedSubLevel.mandatory !== false;
    
    const subLevelNotes = notes[subLevelId] || '';
    const subLevelPhotos = photos[subLevelId] || [];
    const subLevelTime = timeSpent[subLevelId] || 0;
    const isUploading = uploadingPhotos[subLevelId] || false;
    
    // Get the questions for this section/sublevel
    const questions = selectedSubLevel.questions || [];

    return (
      <>
        <ContentHeader>
          <ContentTitle>
            <StatusIcon2 status={status} />
            {selectedSubLevel.name || 'Unnamed Section'}
            <MandatoryBadge mandatory={isMandatory}>
              {isMandatory ? 'Mandatory' : 'Recommended'}
            </MandatoryBadge>
            <StatusBadge status={status}>
              {status === 'completed' || status === 'full_compliance' ? 'Full Compliance' : 
               status === 'failed' || status === 'incomplete' || status === 'non_compliance' ? 'Non-Compliance' : 
               status === 'in_progress' || status === 'partial_compliance' ? 'Partial Compliance' : 
               status === 'not_applicable' ? 'Not Applicable' : 'Pending'}
            </StatusBadge>
          </ContentTitle>
          
          {selectedSubLevel.description && (
            <ContentDescription>{selectedSubLevel.description}</ContentDescription>
          )}
        </ContentHeader>
        
        {/* Display questions if they exist */}
        {questions && questions.length > 0 && (
          <QuestionsContainer>
            {questions.map((question, index) => (
              <QuestionItem key={question._id || index}>
                <QuestionHeader>
                  <QuestionNumber>{index + 1}</QuestionNumber>
                  <QuestionText>{question.text}</QuestionText>
                </QuestionHeader>
                
                {question.description && (
                  <QuestionDescription>{question.description}</QuestionDescription>
                )}
                
                {/* Display appropriate input based on question type */}
                {question.type === 'compliance' && (
                  <ComplianceButtonGroup>
                    <CompleteButton 
                      onClick={() => handleComplianceChange(subLevelId, 'full_compliance')}
                      disabled={loading[subLevelId]}
                    >
                      {loading[subLevelId] ? <Loader size={16} /> : <CheckCircle size={16} />}
                      Full Compliance
                    </CompleteButton>
                    <PartialButton 
                      onClick={() => handleComplianceChange(subLevelId, 'partial_compliance')}
                      disabled={loading[subLevelId]}
                    >
                      {loading[subLevelId] ? <Loader size={16} /> : <AlertCircle size={16} />}
                      Partial Compliance
                    </PartialButton>
                    <FailButton 
                      onClick={() => handleComplianceChange(subLevelId, 'non_compliance')}
                      disabled={loading[subLevelId]}
                    >
                      {loading[subLevelId] ? <Loader size={16} /> : <XCircle size={16} />}
                      Non-Compliance
                    </FailButton>
                    <NAButton 
                      onClick={() => handleComplianceChange(subLevelId, 'not_applicable')}
                      disabled={loading[subLevelId]}
                    >
                      {loading[subLevelId] ? <Loader size={16} /> : <HelpCircle size={16} />}
                      Not Applicable
                    </NAButton>
                  </ComplianceButtonGroup>
                )}
                
                {/* Add additional question type handling as needed */}
              </QuestionItem>
            ))}
          </QuestionsContainer>
        )}
        
        {!isTaskCompleted && (
          <>
            <ActionInput>
              <div>
                <MessageSquare size={16} color="var(--color-navy)" />
                <span style={{ marginLeft: '8px', fontSize: '14px', fontWeight: '500' }}>Notes</span>
                <CommentInput 
                  placeholder="Add your inspection notes here..."
                  value={subLevelNotes}
                  onChange={(e) => handleNoteChange(subLevelId, e.target.value)}
                />
              </div>
              
              <div>
                <PaperclipIcon size={16} color="var(--color-navy)" />
                <span style={{ marginLeft: '8px', fontSize: '14px', fontWeight: '500' }}>Photos</span>
                
                <ImageUploadWrapper>
                  <FileInputLabel>
                    <Image size={16} />
                    Upload Photo
                    <FileInput 
                      type="file" 
                      accept="image/*"
                      ref={el => fileInputRefs.current[subLevelId] = el}
                      onChange={(e) => handleFileChange(subLevelId, e)}
                      disabled={isUploading}
                    />
                  </FileInputLabel>
                  
                  {isUploading && (
                    <div style={{ 
                      display: 'flex', 
                      alignItems: 'center', 
                      gap: '8px', 
                      marginTop: '10px',
                      color: 'var(--color-navy)'
                    }}>
                      <Loader size={16} />
                      <span>Uploading...</span>
                    </div>
                  )}
                  
                  {subLevelPhotos.length > 0 && (
                    <PhotoPreviewContainer>
                      {subLevelPhotos.map((photo, idx) => (
                        <PhotoPreview key={idx} onClick={() => setPhotoPreview(photo)}>
                          <img src={photo} alt={`Photo ${idx + 1}`} />
                          <button 
                            className="remove-button"
                            onClick={(e) => {
                              e.stopPropagation();
                              removePhoto(subLevelId, photo);
                            }}
                          >
                            <Trash2 size={14} />
                          </button>
                        </PhotoPreview>
                      ))}
                    </PhotoPreviewContainer>
                  )}
                </ImageUploadWrapper>
              </div>
              
              <TimeInputContainer>
                <Timer size={16} color="var(--color-navy)" />
                <span style={{ fontSize: '14px', fontWeight: '500' }}>Time Spent (hours):</span>
                <TimeInput 
                  type="number" 
                  min="0" 
                  step="0.01"
                  value={activeTimers[subLevelId] ? subLevelTime.toFixed(2) : (subLevelTime.toFixed(2) || "0.00")}
                  onChange={(e) => handleTimeChange(subLevelId, e.target.value)}
                  readOnly={activeTimers[subLevelId]}
                />
                {activeTimers[subLevelId] ? (
                  <ActionButton 
                    onClick={() => stopTimer(subLevelId)}
                    style={{ backgroundColor: '#ffebee', color: '#d32f2f' }}
                  >
                    Stop Timer
                  </ActionButton>
                ) : (
                  <ActionButton 
                    onClick={() => startTimer(subLevelId)}
                    style={{ backgroundColor: '#e8f5e9', color: '#2e7d32' }}
                  >
                    Start Timer
                  </ActionButton>
                )}
              </TimeInputContainer>
            </ActionInput>
            
            <ButtonGroup>
              <CompleteButton 
                onClick={() => handleComplianceChange(subLevelId, 'full_compliance')}
                disabled={loading[subLevelId]}
              >
                {loading[subLevelId] ? <Loader size={16} /> : <CheckCircle size={16} />}
                Full Compliance
              </CompleteButton>
              <PartialButton 
                onClick={() => handleComplianceChange(subLevelId, 'partial_compliance')}
                disabled={loading[subLevelId]}
              >
                {loading[subLevelId] ? <Loader size={16} /> : <AlertCircle size={16} />}
                Partial Compliance
              </PartialButton>
              <FailButton 
                onClick={() => handleComplianceChange(subLevelId, 'non_compliance')}
                disabled={loading[subLevelId]}
              >
                {loading[subLevelId] ? <Loader size={16} /> : <XCircle size={16} />}
                Non-Compliance
              </FailButton>
              <NAButton 
                onClick={() => handleComplianceChange(subLevelId, 'not_applicable')}
                disabled={loading[subLevelId]}
              >
                {loading[subLevelId] ? <Loader size={16} /> : <HelpCircle size={16} />}
                Not Applicable
              </NAButton>
            </ButtonGroup>
          </>
        )}
        
        {(isCompleted || isFailed || isPartial || isNotApplicable) && (
          <>
            {subLevelNotes && (
              <div style={{ marginTop: '16px' }}>
                <div style={{ fontSize: '14px', fontWeight: '500', marginBottom: '8px' }}>
                  <MessageSquare size={14} style={{ marginRight: '6px' }} />
                  Notes:
                </div>
                <div style={{ 
                  padding: '12px', 
                  background: 'rgba(248, 250, 252, 0.7)', 
                  borderRadius: '8px',
                  fontSize: '14px'
                }}>
                  {subLevelNotes}
                </div>
              </div>
            )}
            
            {subLevelPhotos.length > 0 && (
              <div style={{ marginTop: '16px' }}>
                <div style={{ fontSize: '14px', fontWeight: '500', marginBottom: '8px' }}>
                  <PaperclipIcon size={14} style={{ marginRight: '6px' }} />
                  Photos:
                </div>
                <PhotoPreviewContainer>
                  {subLevelPhotos.map((photo, idx) => (
                    <PhotoPreview key={idx} onClick={() => setPhotoPreview(photo)}>
                      <img src={photo} alt={`Photo ${idx + 1}`} />
                    </PhotoPreview>
                  ))}
                </PhotoPreviewContainer>
              </div>
            )}
            
            {subLevelTime > 0 && (
              <div style={{ marginTop: '16px', fontSize: '14px' }}>
                <Timer size={14} style={{ marginRight: '6px' }} />
                Time Spent: <strong>{subLevelTime.toFixed(2)} hours</strong>
              </div>
            )}
          </>
        )}
      </>
    );
  };
  
  // Render the photo lightbox if a photo is selected
  const renderPhotoLightbox = () => {
    if (!photoPreview) return null;
    
    return (
      <PhotoLightbox onClick={() => setPhotoPreview(null)}>
        <img src={photoPreview} alt="Enlarged preview" onClick={(e) => e.stopPropagation()} />
        <button className="close-button" onClick={() => setPhotoPreview(null)}>✕</button>
      </PhotoLightbox>
    );
  };
  
  const { subLevels } = getInspectionData();
  const overallProgress = calculateProgress();
  const isTaskCompleted = task && task.status === 'completed';
  
  if (!subLevels || subLevels.length === 0) {
    return (
      <Container>
        <Title>
          <Activity size={20} />
          Inspection Performance
        </Title>
        <NoSubLevelsMessage>
          <AlertTriangle size={48} color="#f59e0b" />
          <h3>No Template</h3>
          <p>There are no inspection levels defined for this task.</p>
        </NoSubLevelsMessage>
      </Container>
    );
  }
  
  return (
    <Container>
      {photoPreview && renderPhotoLightbox()}
      
      <Title>
        <Activity size={20} />
        {pageData ? pageData.name : 'Inspection Items'}
      </Title>
      
      {searchTerm.trim() !== '' ? (
        <div>
          <ResultsTitle>
            Search Results for "{searchTerm}"
          </ResultsTitle>
          {renderSearchResults()}
        </div>
      ) : (
        <>
          {/* New linear sections view */}
          <SectionsContainer>
            {getSections().map((section, index) => (
              <SectionCard key={section._id || index}>
                <SectionHeader>
                  <SectionHeaderContent>
                    <SectionNumber>{index + 1}</SectionNumber>
                    <div>
                      <SectionTitle>
                        {section.name}
                        <MandatoryBadge mandatory={section.mandatory !== false}>
                          {section.mandatory !== false ? 'Mandatory' : 'Recommended'}
                        </MandatoryBadge>
                        <StatusBadge status={getSubLevelStatus(section._id)}>
                          {getSubLevelStatus(section._id) === 'completed' || getSubLevelStatus(section._id) === 'full_compliance' ? 
                            'Full Compliance' : 
                            getSubLevelStatus(section._id) === 'failed' || getSubLevelStatus(section._id) === 'incomplete' || 
                            getSubLevelStatus(section._id) === 'non_compliance' ? 
                            'Non-Compliance' : 
                            getSubLevelStatus(section._id) === 'in_progress' || getSubLevelStatus(section._id) === 'partial_compliance' ? 
                            'Partial Compliance' : 
                            getSubLevelStatus(section._id) === 'not_applicable' ? 
                            'Not Applicable' : 'Pending'}
                        </StatusBadge>
                      </SectionTitle>
                      
                      {section.description && (
                        <SectionDescription>{section.description}</SectionDescription>
                      )}
                    </div>
                  </SectionHeaderContent>
                  
                  <SectionScore>
                    <ScoreTitle>Section Score</ScoreTitle>
                    <ScoreValue>
                      {calculateSectionScore(section._id).achieved} / {calculateSectionScore(section._id).total}
                      <ScorePercentage percent={calculateSectionScore(section._id).percentage}>
                        ({calculateSectionScore(section._id).percentage}%)
                      </ScorePercentage>
                    </ScoreValue>
                  </SectionScore>
                </SectionHeader>
                
                {/* Questions for this section */}
                <QuestionsContainer>
                  {(section.questions || []).map((question, qIndex) => (
                    <QuestionCard key={question._id || qIndex}>
                      <QuestionHeader>
                        <QuestionNumber>{qIndex + 1}</QuestionNumber>
                        <QuestionText>{question.text}</QuestionText>
                        {question.mandatory !== false && (
                          <QuestionMandatory>*Required</QuestionMandatory>
                        )}
                      </QuestionHeader>
                      
                      {question.description && (
                        <QuestionDescription>{question.description}</QuestionDescription>
                      )}
                      
                      {/* Render appropriate input based on question type */}
                      <QuestionResponseArea>
                        <ResponseContainer>
                          {renderQuestionInput(question, section._id)}
                        </ResponseContainer>
                        
                        <QuestionScoreBox>
                          <ScoreTitle>Question Score</ScoreTitle>
                          <ScoreValue>
                            {calculateQuestionScore(question, section._id).achieved} / {calculateQuestionScore(question, section._id).total}
                          </ScoreValue>
                        </QuestionScoreBox>
                      </QuestionResponseArea>
                    </QuestionCard>
                  ))}
                </QuestionsContainer>
                
                {/* Notes, photos, time spent */}
                <SectionFooter>
                  <FooterTitle>
                    <MessageSquare size={16} />
                    Additional Information
                  </FooterTitle>
                  
                  <FooterContent>
                    <div style={{ flex: 3 }}>
                      {/* Notes */}
                      <div>
                        <InputLabel>
                          <MessageSquare size={14} />
                          Notes
                        </InputLabel>
                        <CommentInput 
                          placeholder="Add your inspection notes here..."
                          value={notes[section._id] || ''}
                          onChange={(e) => handleNoteChange(section._id, e.target.value)}
                        />
                      </div>
                      
                      {/* Photo uploads */}
                      <div style={{ marginTop: '16px' }}>
                        <InputLabel>
                          <PaperclipIcon size={14} />
                          Photos
                        </InputLabel>
                        
                        <FileInputLabel>
                          <Image size={16} />
                          Upload Photo
                          <FileInput 
                            type="file" 
                            accept="image/*"
                            ref={el => fileInputRefs.current[section._id] = el}
                            onChange={(e) => handleFileChange(section._id, e)}
                            disabled={uploadingPhotos[section._id]}
                          />
                        </FileInputLabel>
                        
                        {uploadingPhotos[section._id] && (
                          <div style={{ 
                            display: 'flex', 
                            alignItems: 'center', 
                            gap: '8px', 
                            marginTop: '10px',
                            color: 'var(--color-navy)'
                          }}>
                            <Loader size={16} />
                            <span>Uploading...</span>
                          </div>
                        )}
                        
                        {(photos[section._id] || []).length > 0 && (
                          <PhotoPreviewContainer>
                            {(photos[section._id] || []).map((photo, idx) => (
                              <PhotoPreview key={idx} onClick={() => setPhotoPreview(photo)}>
                                <img src={photo} alt={`Photo ${idx + 1}`} />
                                <button 
                                  className="remove-button"
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    removePhoto(section._id, photo);
                                  }}
                                >
                                  <Trash2 size={14} />
                                </button>
                              </PhotoPreview>
                            ))}
                          </PhotoPreviewContainer>
                        )}
                      </div>
                    </div>
                    
                    <div style={{ flex: 1 }}>
                      {/* Time tracking */}
                      <div>
                        <InputLabel>
                          <Timer size={14} />
                          Time Tracking
                        </InputLabel>
                        
                        <TimeInputContainer>
                          <TimeInput 
                            type="number" 
                            min="0" 
                            step="0.01"
                            value={activeTimers[section._id] ? timeSpent[section._id]?.toFixed(2) : ((timeSpent[section._id] || 0).toFixed(2))}
                            onChange={(e) => handleTimeChange(section._id, e.target.value)}
                            readOnly={activeTimers[section._id]}
                          />
                          <TimeLabel>hours</TimeLabel>
                          
                          {activeTimers[section._id] ? (
                            <StopTimerButton onClick={() => stopTimer(section._id)}>
                              <PauseCircle size={16} />
                              Stop
                            </StopTimerButton>
                          ) : (
                            <StartTimerButton onClick={() => startTimer(section._id)}>
                              <PlayCircle size={16} />
                              Start
                            </StartTimerButton>
                          )}
                        </TimeInputContainer>
                      </div>
                    </div>
                  </FooterContent>
                  
                  {/* Status buttons */}
                  <ComplianceButtons>
                    <CompleteButton 
                      onClick={() => handleComplianceChange(section._id, 'full_compliance')}
                      disabled={loading[section._id]}
                    >
                      {loading[section._id] ? <Loader size={16} /> : <CheckCircle size={16} />}
                      Full Compliance
                    </CompleteButton>
                    <PartialButton 
                      onClick={() => handleComplianceChange(section._id, 'partial_compliance')}
                      disabled={loading[section._id]}
                    >
                      {loading[section._id] ? <Loader size={16} /> : <AlertCircle size={16} />}
                      Partial Compliance
                    </PartialButton>
                    <FailButton 
                      onClick={() => handleComplianceChange(section._id, 'non_compliance')}
                      disabled={loading[section._id]}
                    >
                      {loading[section._id] ? <Loader size={16} /> : <XCircle size={16} />}
                      Non-Compliance
                    </FailButton>
                    <NAButton 
                      onClick={() => handleComplianceChange(section._id, 'not_applicable')}
                      disabled={loading[section._id]}
                    >
                      {loading[section._id] ? <Loader size={16} /> : <HelpCircle size={16} />}
                      Not Applicable
                    </NAButton>
                  </ComplianceButtons>
                </SectionFooter>
              </SectionCard>
            ))}
          </SectionsContainer>
          
          {/* Overall progress bar */}
          <ProgressBar progress={calculateProgress()}>
            <div className="fill"></div>
          </ProgressBar>
          <ProgressInfo>
            <div className="label">Overall Progress</div>
            <div className="percentage">{calculateProgress()}%</div>
          </ProgressInfo>
          
          {/* Export report button */}
          <div style={{ textAlign: 'center', marginTop: '24px' }}>
            <ExportButton onClick={onExportReport}>
              <Download size={16} />
              Export Report
            </ExportButton>
          </div>
        </>
      )}
    </Container>
  );
};

// Update SectionGrid to match new design
const SectionGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 16px;
  width: 100%;
  margin-bottom: 24px;
  
  @media (max-width: 768px) {
    grid-template-columns: 1fr;
  }
`;

const SectionCard = styled.div`
  background: white;
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
`;

const SectionHeader = styled.div`
  padding: 16px;
  background: rgba(248, 250, 252, 0.8);
  border-bottom: 1px solid #e2e8f0;
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  gap: 16px;
  
  @media (max-width: 768px) {
    flex-direction: column;
  }
`;

const SectionHeaderContent = styled.div`
  display: flex;
  gap: 12px;
  flex: 1;
`;

const SectionNumber = styled.div`
  width: 32px;
  height: 32px;
  background: var(--color-navy);
  color: white;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: 600;
  flex-shrink: 0;
`;

const SectionDescription = styled.div`
  padding: 16px;
  color: #64748b;
  font-size: 14px;
  line-height: 1.5;
  border-bottom: 1px solid #edf2f7;
`;

const SectionScore = styled.div`
  background: white;
  padding: 12px 16px;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  text-align: center;
  min-width: 120px;
`;

const ScoreTitle = styled.div`
  font-size: 12px;
  color: #64748b;
  margin-bottom: 4px;
`;

const ScoreValue = styled.div`
  font-size: 16px;
  font-weight: 600;
  color: var(--color-navy);
`;

const ScorePercentage = styled.span`
  font-size: 14px;
  color: ${props => props.percent >= 80 ? '#4caf50' : props.percent >= 50 ? '#ff9800' : '#f44336'};
  margin-left: 4px;
`;

const QuestionsContainer = styled.div`
  padding: 16px;
  display: flex;
  flex-direction: column;
  gap: 16px;
`;

const QuestionCard = styled.div`
  background: white;
  border-radius: 8px;
  padding: 16px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.03);
  border: 1px solid #f1f5f9;
`;

const QuestionHeader = styled.div`
  display: flex;
  align-items: flex-start;
  gap: 12px;
  margin-bottom: 12px;
`;

const QuestionNumber = styled.div`
  min-width: 24px;
  height: 24px;
  background: var(--color-navy-light);
  color: var(--color-navy);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 12px;
  font-weight: 600;
  flex-shrink: 0;
`;

const QuestionText = styled.div`
  font-weight: 500;
  color: #334155;
  flex-grow: 1;
`;

const QuestionDescription = styled.div`
  color: #64748b;
  font-size: 14px;
  margin-left: 36px;
  margin-bottom: 16px;
`;

const QuestionResponseArea = styled.div`
  display: flex;
  gap: 16px;
  align-items: flex-start;
  
  @media (max-width: 768px) {
    flex-direction: column;
  }
`;

const ResponseContainer = styled.div`
  flex: 1;
`;

const QuestionScoreBox = styled.div`
  background: #f8fafc;
  padding: 10px;
  border-radius: 6px;
  text-align: center;
  min-width: 100px;
  
  @media (max-width: 768px) {
    align-self: flex-end;
  }
`;

const ComplianceButtonGroup = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
`;

const ComplianceButton = styled.button`
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 8px 12px;
  background: ${props => props.selected ? 'var(--color-navy-light)' : 'white'};
  color: ${props => props.selected ? 'var(--color-navy)' : '#64748b'};
  border: 1px solid ${props => props.selected ? 'var(--color-navy)' : '#e2e8f0'};
  border-radius: 6px;
  font-size: 14px;
  cursor: pointer;
  transition: all 0.2s;
  
  &:hover:not(:disabled) {
    background: var(--color-navy-light);
    color: var(--color-navy);
    border-color: var(--color-navy);
  }
  
  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
`;

const TextInput = styled.input`
  width: 100%;
  padding: 10px 12px;
  border: 1px solid #e2e8f0;
  border-radius: 6px;
  font-size: 14px;
  
  &:focus {
    outline: none;
    border-color: var(--color-navy);
    box-shadow: 0 0 0 2px rgba(26, 35, 126, 0.1);
  }
  
  &:disabled {
    background: #f8fafc;
    cursor: not-allowed;
  }
`;

const RadioGroup = styled.div`
  display: flex;
  flex-direction: column;
  gap: 8px;
`;

const RadioOption = styled.div`
  display: flex;
  align-items: center;
  gap: 8px;
`;

const RadioInput = styled.input`
  cursor: pointer;
  
  &:disabled {
    cursor: not-allowed;
  }
`;

const RadioLabel = styled.label`
  font-size: 14px;
  color: #334155;
  cursor: pointer;
`;

const SignatureArea = styled.div`
  margin-top: 8px;
`;

const SignatureBox = styled.div`
  width: 100%;
  cursor: pointer;
`;

const ClearButton = styled.button`
  background: white;
  border: 1px solid #e2e8f0;
  padding: 6px 12px;
  border-radius: 6px;
  font-size: 13px;
  cursor: pointer;
  
  &:hover {
    background: #f8fafc;
  }
`;

const SectionFooter = styled.div`
  padding: 16px;
  background: rgba(248, 250, 252, 0.5);
  border-top: 1px solid #e2e8f0;
`;

const FooterTitle = styled.h4`
  font-size: 15px;
  font-weight: 600;
  color: var(--color-navy);
  margin: 0 0 16px 0;
  display: flex;
  align-items: center;
  gap: 8px;
`;

const FooterContent = styled.div`
  display: flex;
  gap: 24px;
  
  @media (max-width: 768px) {
    flex-direction: column;
  }
`;

const InputLabel = styled.div`
  font-size: 14px;
  font-weight: 500;
  color: #334155;
  margin-bottom: 8px;
  display: flex;
  align-items: center;
  gap: 8px;
`;

const TimeInputContainer = styled.div`
  display: flex;
  align-items: center;
  gap: 8px;
`;

const TimeLabel = styled.span`
  font-size: 14px;
  color: #64748b;
`;

const StartTimerButton = styled.button`
  display: flex;
  align-items: center;
  gap: 6px;
  background: #e8f5e9;
  color: #2e7d32;
  border: 1px solid rgba(46, 125, 50, 0.2);
  padding: 6px 12px;
  border-radius: 6px;
  font-size: 13px;
  cursor: pointer;
  
  &:hover {
    background: #c8e6c9;
  }
`;

const StopTimerButton = styled.button`
  display: flex;
  align-items: center;
  gap: 6px;
  background: #ffebee;
  color: #c62828;
  border: 1px solid rgba(198, 40, 40, 0.2);
  padding: 6px 12px;
  border-radius: 6px;
  font-size: 13px;
  cursor: pointer;
  
  &:hover {
    background: #ffcdd2;
  }
`;

const ComplianceButtons = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  margin-top: 24px;
  justify-content: center;
`;

// New styled components for the linear layout
const SectionsContainer = styled.div`
  display: flex;
  flex-direction: column;
  gap: 24px;
  margin-bottom: 24px;
`;

const SectionCard = styled.div`
  background: white;
  border-radius: 12px;
  overflow: hidden;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
`;

const SectionHeader = styled.div`
  padding: 16px;
  background: rgba(248, 250, 252, 0.8);
  border-bottom: 1px solid #e2e8f0;
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  gap: 16px;
  
  @media (max-width: 768px) {
    flex-direction: column;
  }
`;

const SectionHeaderContent = styled.div`
  display: flex;
  gap: 12px;
  flex: 1;
`;

const SectionNumber = styled.div`
  width: 32px;
  height: 32px;
  background: var(--color-navy);
  color: white;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: 600;
  flex-shrink: 0;
`;

const SectionDescription = styled.div`
  padding: 16px;
  color: #64748b;
  font-size: 14px;
  line-height: 1.5;
  border-bottom: 1px solid #edf2f7;
`;

const SectionScore = styled.div`
  background: white;
  padding: 12px 16px;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  text-align: center;
  min-width: 120px;
`;

const ScoreTitle = styled.div`
  font-size: 12px;
  color: #64748b;
  margin-bottom: 4px;
`;

const ScoreValue = styled.div`
  font-size: 16px;
  font-weight: 600;
  color: var(--color-navy);
`;

const ScorePercentage = styled.span`
  font-size: 14px;
  color: ${props => props.percent >= 80 ? '#4caf50' : props.percent >= 50 ? '#ff9800' : '#f44336'};
  margin-left: 4px;
`;

const QuestionsContainer = styled.div`
  padding: 16px;
  display: flex;
  flex-direction: column;
  gap: 16px;
`;

const QuestionCard = styled.div`
  background: white;
  border-radius: 8px;
  padding: 16px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.03);
  border: 1px solid #f1f5f9;
`;

const QuestionHeader = styled.div`
  display: flex;
  align-items: flex-start;
  gap: 12px;
  margin-bottom: 12px;
`;

const QuestionNumber = styled.div`
  min-width: 24px;
  height: 24px;
  background: var(--color-navy-light);
  color: var(--color-navy);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 12px;
  font-weight: 600;
  flex-shrink: 0;
`;

const QuestionText = styled.div`
  font-weight: 500;
  color: #334155;
  flex-grow: 1;
`;

const QuestionDescription = styled.div`
  color: #64748b;
  font-size: 14px;
  margin-left: 36px;
  margin-bottom: 16px;
`;

const QuestionResponseArea = styled.div`
  display: flex;
  gap: 16px;
  align-items: flex-start;
  
  @media (max-width: 768px) {
    flex-direction: column;
  }
`;

const ResponseContainer = styled.div`
  flex: 1;
`;

const QuestionScoreBox = styled.div`
  background: #f8fafc;
  padding: 10px;
  border-radius: 6px;
  text-align: center;
  min-width: 100px;
  
  @media (max-width: 768px) {
    align-self: flex-end;
  }
`;

const ComplianceButtonGroup = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
`;

const ComplianceButton = styled.button`
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 8px 12px;
  background: ${props => props.selected ? 'var(--color-navy-light)' : 'white'};
  color: ${props => props.selected ? 'var(--color-navy)' : '#64748b'};
  border: 1px solid ${props => props.selected ? 'var(--color-navy)' : '#e2e8f0'};
  border-radius: 6px;
  font-size: 14px;
  cursor: pointer;
  transition: all 0.2s;
  
  &:hover:not(:disabled) {
    background: var(--color-navy-light);
    color: var(--color-navy);
    border-color: var(--color-navy);
  }
  
  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
`;

const TextInput = styled.input`
  width: 100%;
  padding: 10px 12px;
  border: 1px solid #e2e8f0;
  border-radius: 6px;
  font-size: 14px;
  
  &:focus {
    outline: none;
    border-color: var(--color-navy);
    box-shadow: 0 0 0 2px rgba(26, 35, 126, 0.1);
  }
  
  &:disabled {
    background: #f8fafc;
    cursor: not-allowed;
  }
`;

const RadioGroup = styled.div`
  display: flex;
  flex-direction: column;
  gap: 8px;
`;

const RadioOption = styled.div`
  display: flex;
  align-items: center;
  gap: 8px;
`;

const RadioInput = styled.input`
  cursor: pointer;
  
  &:disabled {
    cursor: not-allowed;
  }
`;

const RadioLabel = styled.label`
  font-size: 14px;
  color: #334155;
  cursor: pointer;
`;

const SignatureArea = styled.div`
  margin-top: 8px;
`;

const SignatureBox = styled.div`
  width: 100%;
  cursor: pointer;
`;

const ClearButton = styled.button`
  background: white;
  border: 1px solid #e2e8f0;
  padding: 6px 12px;
  border-radius: 6px;
  font-size: 13px;
  cursor: pointer;
  
  &:hover {
    background: #f8fafc;
  }
`;

const SectionFooter = styled.div`
  padding: 16px;
  background: rgba(248, 250, 252, 0.5);
  border-top: 1px solid #e2e8f0;
`;

const FooterTitle = styled.h4`
  font-size: 15px;
  font-weight: 600;
  color: var(--color-navy);
  margin: 0 0 16px 0;
  display: flex;
  align-items: center;
  gap: 8px;
`;

const FooterContent = styled.div`
  display: flex;
  gap: 24px;
  
  @media (max-width: 768px) {
    flex-direction: column;
  }
`;

const InputLabel = styled.div`
  font-size: 14px;
  font-weight: 500;
  color: #334155;
  margin-bottom: 8px;
  display: flex;
  align-items: center;
  gap: 8px;
`;

const TimeInputContainer = styled.div`
  display: flex;
  align-items: center;
  gap: 8px;
`;

const TimeLabel = styled.span`
  font-size: 14px;
  color: #64748b;
`;

const StartTimerButton = styled.button`
  display: flex;
  align-items: center;
  gap: 6px;
  background: #e8f5e9;
  color: #2e7d32;
  border: 1px solid rgba(46, 125, 50, 0.2);
  padding: 6px 12px;
  border-radius: 6px;
  font-size: 13px;
  cursor: pointer;
  
  &:hover {
    background: #c8e6c9;
  }
`;

const StopTimerButton = styled.button`
  display: flex;
  align-items: center;
  gap: 6px;
  background: #ffebee;
  color: #c62828;
  border: 1px solid rgba(198, 40, 40, 0.2);
  padding: 6px 12px;
  border-radius: 6px;
  font-size: 13px;
  cursor: pointer;
  
  &:hover {
    background: #ffcdd2;
  }
`;

const ComplianceButtons = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  margin-top: 24px;
  justify-content: center;
`;

export default InspectionStepForm;

// Helper function to get sections
function getSections() {
  if (pageData && pageData.sections) {
    return pageData.sections;
  } else if (task?.inspectionLevel?.subLevels) {
    return task.inspectionLevel.subLevels;
  }
  return [];
}

// Helper function to calculate section score
function calculateSectionScore(sectionId) {
  const sectionQuestions = getSections().find(s => s._id === sectionId)?.questions || [];
  let total = 0;
  let achieved = 0;
  
  // For compliance-type questions
  sectionQuestions.forEach(question => {
    if (question.mandatory !== false) {
      const status = complianceStatus[sectionId];
      total += 2; // Each question is worth 2 points max
      
      if (status === 'completed' || status === 'full_compliance') {
        achieved += 2;
      } else if (status === 'in_progress' || status === 'partial_compliance') {
        achieved += 1;
      }
    }
  });
  
  const percentage = total > 0 ? Math.round((achieved / total) * 100) : 0;
  
  return { total, achieved, percentage };
}

// Helper function to calculate question score
function calculateQuestionScore(question, sectionId) {
  if (question.mandatory === false) {
    return { total: 0, achieved: 0 };
  }
  
  const status = complianceStatus[sectionId];
  const total = 2; // Each question is worth 2 points max
  let achieved = 0;
  
  if (status === 'completed' || status === 'full_compliance') {
    achieved = 2;
  } else if (status === 'in_progress' || status === 'partial_compliance') {
    achieved = 1;
  }
  
  return { total, achieved };
}

// Function to render appropriate input based on question type
function renderQuestionInput(question, sectionId) {
  const status = getSubLevelStatus(sectionId);
  const isCompleted = status === 'completed' || status === 'full_compliance';
  const isPartial = status === 'in_progress' || status === 'partial_compliance';
  const isFailed = status === 'failed' || status === 'incomplete' || status === 'non_compliance';
  const isNotApplicable = status === 'not_applicable';
  const isDisabled = isCompleted || isFailed || isNotApplicable;
  
  switch (question.type) {
    case 'compliance':
      return (
        <ComplianceButtonGroup>
          <ComplianceButton 
            selected={isCompleted}
            onClick={() => !isDisabled && handleComplianceChange(sectionId, 'full_compliance')}
            disabled={isDisabled || loading[sectionId]}
          >
            <CheckCircle size={16} />
            Full Compliance
          </ComplianceButton>
          <ComplianceButton 
            selected={isPartial}
            onClick={() => !isDisabled && handleComplianceChange(sectionId, 'partial_compliance')}
            disabled={isDisabled || loading[sectionId]}
          >
            <AlertCircle size={16} />
            Partial Compliance
          </ComplianceButton>
          <ComplianceButton 
            selected={isFailed}
            onClick={() => !isDisabled && handleComplianceChange(sectionId, 'non_compliance')}
            disabled={isDisabled || loading[sectionId]}
          >
            <XCircle size={16} />
            Non-Compliance
          </ComplianceButton>
          <ComplianceButton 
            selected={isNotApplicable}
            onClick={() => !isDisabled && handleComplianceChange(sectionId, 'not_applicable')}
            disabled={isDisabled || loading[sectionId]}
          >
            <HelpCircle size={16} />
            Not Applicable
          </ComplianceButton>
        </ComplianceButtonGroup>
      );
    case 'text':
      return (
        <TextInput 
          type="text"
          placeholder="Enter your response here..."
          disabled={isDisabled}
          // Additional text input handling logic would go here
        />
      );
    case 'radio':
      return (
        <RadioGroup>
          {(question.options || ['Yes', 'No', 'N/A']).map((option, index) => (
            <RadioOption key={index}>
              <RadioInput 
                type="radio" 
                name={`radio-${question._id}`} 
                id={`radio-${question._id}-${index}`}
                disabled={isDisabled}
                // Additional radio input handling logic would go here
              />
              <RadioLabel htmlFor={`radio-${question._id}-${index}`}>{option}</RadioLabel>
            </RadioOption>
          ))}
        </RadioGroup>
      );
    case 'signature':
      return (
        <SignatureArea>
          {isDisabled ? (
            <div style={{ textAlign: 'center', padding: '20px', color: '#64748b' }}>
              Signature function is disabled in this compliance state
            </div>
          ) : (
            <>
              <div style={{ textAlign: 'center', marginBottom: '10px' }}>
                Sign in the area below
              </div>
              <SignatureBox>
                {/* Signature component would go here */}
                <div style={{ 
                  height: '100px', 
                  border: '1px dashed #cbd5e1', 
                  borderRadius: '8px',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center'
                }}>
                  <Edit size={24} color="#94a3b8" />
                </div>
              </SignatureBox>
              <div style={{ textAlign: 'center', marginTop: '10px' }}>
                <ClearButton>Clear Signature</ClearButton>
              </div>
            </>
          )}
        </SignatureArea>
      );
    default:
      return (
        <div style={{ padding: '12px', color: '#64748b' }}>
          This question type is not supported.
        </div>
      );
  }
}